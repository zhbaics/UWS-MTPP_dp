/*
 * SelectProtectedSysVolPane.java
 *
 * Created on 2006/12/29,�AM�9:52
 */

package dataprotect.ui;

import dataprotect.cmdp.entity.VolumeWrapper2;
import dataprotect.cmdp.ui.multiRenderTable.JTableX2;
import dataprotect.cmdp.ui.multiRenderTable.MyDefaultTableModelForTabX2;
import java.awt.*;
import javax.swing.*;
import javax.swing.table.*;
import java.util.*;
import dataprotect.res.*;
import dataprotect.data.*;
import dataprotect.ui.multiRenderTable.*;
import mylib.tool.Check;

/**
 *
 * @author  Administrator
 */
public class SelectProtectedSysVolPane extends javax.swing.JPanel implements SelectProtectedFS{
    
    /** Creates new form SelectProtectedSysVolPane */
    public SelectProtectedSysVolPane() {
        initComponents();
    }

    public SelectProtectedSysVolPane( SanBootView view ){
        this( view,ResourceCenter.CMD_TYPE_MTPP );
    }

    public SelectProtectedSysVolPane( SanBootView view,int mode ) {
        this();
        myInit( view,mode );
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jPanel5 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jPanel7 = new javax.swing.JPanel();
        jRadioButton1 = new javax.swing.JRadioButton();
        jRadioButton2 = new javax.swing.JRadioButton();
        jRadioButton3 = new javax.swing.JRadioButton();
        jLabel1 = new javax.swing.JLabel();

        setLayout(new java.awt.BorderLayout());

        jPanel1.setPreferredSize(new java.awt.Dimension(20, 10));
        add(jPanel1, java.awt.BorderLayout.WEST);

        jPanel2.setPreferredSize(new java.awt.Dimension(20, 10));
        add(jPanel2, java.awt.BorderLayout.EAST);

        jPanel3.setLayout(new java.awt.BorderLayout());

        jPanel4.setLayout(new java.awt.BorderLayout());

        jPanel4.setPreferredSize(new java.awt.Dimension(10, 60));
        jScrollPane1.setBorder(new javax.swing.border.EmptyBorder(new java.awt.Insets(1, 1, 1, 1)));
        jTextArea1.setLineWrap(true);
        jTextArea1.setDisabledTextColor(java.awt.Color.black);
        jTextArea1.setEnabled(false);
        jTextArea1.setOpaque(false);
        jScrollPane1.setViewportView(jTextArea1);

        jPanel4.add(jScrollPane1, java.awt.BorderLayout.CENTER);

        jPanel3.add(jPanel4, java.awt.BorderLayout.NORTH);

        jPanel5.setLayout(new java.awt.BorderLayout());

        jPanel5.add(jScrollPane2, java.awt.BorderLayout.CENTER);

        jPanel7.setLayout(new java.awt.GridBagLayout());

        jPanel7.setBorder(new javax.swing.border.EmptyBorder(new java.awt.Insets(2, 1, 1, 1)));
        jRadioButton1.setText("Copy OS & modify register");
        jRadioButton1.setBorder(new javax.swing.border.EmptyBorder(new java.awt.Insets(1, 1, 1, 1)));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        jPanel7.add(jRadioButton1, gridBagConstraints);

        jRadioButton2.setText("Only modify register");
        jRadioButton2.setBorder(new javax.swing.border.EmptyBorder(new java.awt.Insets(1, 1, 1, 1)));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 30, 0, 0);
        jPanel7.add(jRadioButton2, gridBagConstraints);

        jRadioButton3.setText("Do nothing");
        jRadioButton3.setBorder(new javax.swing.border.EmptyBorder(new java.awt.Insets(1, 1, 1, 1)));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 30, 0, 0);
        jPanel7.add(jRadioButton3, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(0, 80, 0, 0);
        jPanel7.add(jLabel1, gridBagConstraints);

        jPanel5.add(jPanel7, java.awt.BorderLayout.SOUTH);

        jPanel3.add(jPanel5, java.awt.BorderLayout.CENTER);

        add(jPanel3, java.awt.BorderLayout.CENTER);

    }
    // </editor-fold>//GEN-END:initComponents
    
    
    ////GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JRadioButton jRadioButton1;
    private javax.swing.JRadioButton jRadioButton2;
    private javax.swing.JRadioButton jRadioButton3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea jTextArea1;
    ////GEN-END:variables
    
    Vector curVolUsage = null;
    JTable table;
    SanBootView view;
    Object[] header;
    Object[] label;
    WizardDialogSample wizardDiag;
    float vgSize;
    ButtonGroup grp = new ButtonGroup();
    int mode;
    private boolean hasEnoughSpace = true;

    private void myInit( SanBootView _view,int mode ){
        view = _view;
        this.mode = mode;

        if( mode == ResourceCenter.CMD_TYPE_MTPP ){
            jTextArea1.setText(
                SanBootView.res.getString("InitBootHostWizardDialog.tip2")
            );
        }else{
            jTextArea1.setText(
                SanBootView.res.getString("InitBootHostWizardDialog.p-tip2")
            );
        }
        jRadioButton1.setText( SanBootView.res.getString("SelectProtectedSysVolPane.radioBtn.copyos") );
        jRadioButton2.setText( SanBootView.res.getString("SelectProtectedSysVolPane.radioBtn.modRegister") );
        jRadioButton3.setText( SanBootView.res.getString("SelectProtectedSysVolPane.radioBtn.doNothing") );
        
        grp.add( jRadioButton1 );
        grp.add( jRadioButton2 );
        grp.add( jRadioButton3 );
        jPanel7.remove( jRadioButton1 );
        jPanel7.remove( jRadioButton2 );
        jPanel7.remove( jRadioButton3 );
        jPanel7.remove( jLabel1 );
        jRadioButton3.setSelected( true );
    }
    
    public void modTipText( float _vgSize ){
        jTextArea1.append( SanBootView.res.getString("SelectProtectedSysVolPane.label.maxFreeSize") +
                "  "+
                _vgSize + 
                "GB  " +
                SanBootView.res.getString("SelectProtectedSysVolPane.label.maxFreeSize1"));
        vgSize = _vgSize;
    }
    
    public void setCurVolUsage( Vector list ){
        this.curVolUsage = list;
    }

    public void setHasEnoughSpaceFlag( boolean val ){
        this.hasEnoughSpace = val;
    }

    public void setupTable( Vector list ){
        if( mode == ResourceCenter.CMD_TYPE_MTPP ){
            this.setupTableForMTPP( list );
        }else{
            this.setupTableForUnitedProtect( list );
            //this.setupTableForCMDP( list );
        }
    }

    public void setupTableForCMDP( Vector list ){
        ArrayList blkList  = BasicVDisk.getBlkSizeList();
        ArrayList poolList = view.initor.mdb.getPoolWrapList( true );

        int num = list.size();
        int colNum = 7;
        Object[][] data = new Object[num][colNum];

        header = new Object[colNum];
        label = new Object[num];

        header[0] = SanBootView.res.getString("SelectProtectedSysVolPane.table.vol.protected");
        header[1] = SanBootView.res.getString("SelectProtectedSysVolPane.table.vol.vol");
        header[2] = SanBootView.res.getString("SelectProtectedSysVolPane.table.vol.state");
        header[3] = SanBootView.res.getString("SelectProtectedSysVolPane.table.vol.blksize");
        header[4] = SanBootView.res.getString("SelectProtectedSysVolPane.table.vol.pool");
        header[5] = SanBootView.res.getString("SelectProtectedSysVolPane.table.vol.maxSnap");
        header[6] = SanBootView.res.getString("SelectProtectedSysVolPane.table.vol.desc");

        for( int i=0; i<num; i++ ){
            BindOfPartandVol binder = (BindOfPartandVol)list.elementAt(i);
            data[i][0] = Boolean.valueOf( binder.isProtected );
            data[i][1] = binder.part;
            if( binder.isRealVol ){
                data[i][2] = (VolumeWrapper2)binder.vol;
            }else{
                data[i][2] = SanBootView.res.getString("common.nprotected");
            }

            if( binder.isRealVol ){
                data[i][3] = BasicVDisk.getBlkSizeStr( binder.vol.getSnap_block_size() );
            }else{
                data[i][3] = BasicVDisk.BLK_SIZE_4K;
            }

            if( binder.isRealVol ){
                PoolWrapper wrap = view.initor.mdb.getPoolWrapper( binder.vol.getSnap_pool_id() );
                if( wrap != null ){
                    data[i][4] = wrap;
                }else{
                    data[i][4] ="";
                }
            }else{
                if( poolList.size() >0 ){
                    data[i][4] = poolList.get(0);
                }else{
                    data[i][4]="";
                }
            }

            data[i][5] = binder.getMaxSnap();
            data[i][6] = binder.desc;

            label[i]= binder.part.disklabel;
        }

        MyDefaultTableModelForTabX2 model = new MyDefaultTableModelForTabX2( data,header,label );

        table = new JTableX2( model,view,wizardDiag );
        table.setRowHeight( 20 );
        table.setAutoResizeMode( JTable.AUTO_RESIZE_OFF );

        RowEditorModel rm = new RowEditorModel();
        ((JTableX2)table).setRowEditorModel(rm);

        CheckBoxEditor cb = new CheckBoxEditor();
        rm.addEditorForRow( 0, cb );

        MyComboBoxEditor mcb = new MyComboBoxEditor( blkList );
        rm.addEditorForRow( 3, mcb );

        mcb = new MyComboBoxEditor( poolList );
        rm.addEditorForRow( 4, mcb );

        TableColumnModel tableColumnModel = table.getColumnModel();
        colNum = tableColumnModel.getColumnCount();
        tableColumnModel.getColumn(0).setWidth( 45 );
        tableColumnModel.getColumn(1).setWidth( 60 );
        tableColumnModel.getColumn(2).setWidth( 70 );
        tableColumnModel.getColumn(3).setWidth( 80 );
        tableColumnModel.getColumn(4).setWidth( 175 );
        tableColumnModel.getColumn(5).setWidth( 75 );
        tableColumnModel.getColumn(6).setWidth( 150 );
        for( int j=0;j<colNum;j++ )
            table.sizeColumnsToFit( j );

        table.getTableHeader().setBorder( BorderFactory.createRaisedBevelBorder() );
        table.getTableHeader().setReorderingAllowed(false);

        jScrollPane2.getViewport().add( table,null );
        jScrollPane2.getViewport().setBackground( Color.white );
    }

    public void setupTableForUnitedProtect( Vector list ){
        String lp = SanBootView.res.getString("SelectProtectedSysVolPane.combox.lp");
        String pp = SanBootView.res.getString("SelectProtectedSysVolPane.combox.pp");
        ArrayList ptypeList = new ArrayList();
//        ptypeList.add( lp );
        ptypeList.add( pp );

        ArrayList blkList  = BasicVDisk.getBlkSizeList();
        ArrayList poolList = view.initor.mdb.getPoolWrapList( true );

        int num = list.size();
        int colNum = 9;
        Object[][] data = new Object[num][colNum];

        header = new Object[colNum];
        label = new Object[num];

        header[0] = SanBootView.res.getString("SelectProtectedSysVolPane.table.vol.protected");
        header[1] = SanBootView.res.getString("SelectProtectedSysVolPane.table.vol.vol");
        header[2] = SanBootView.res.getString("SelectProtectedSysVolPane.table.vol.state");
        header[3] = SanBootView.res.getString("SelectProtectedSysVolPane.table.vol.ptype"); 
        header[4] = SanBootView.res.getString("SelectProtectedSysVolPane.table.vol.blksize");
        header[5] = SanBootView.res.getString("SelectProtectedSysVolPane.table.vol.pool");
        header[6] = SanBootView.res.getString("SelectProtectedSysVolPane.table.vol.maxSnap");
        header[7] = SanBootView.res.getString("SelectProtectedSysVolPane.table.vol.formatted");
        header[8] = SanBootView.res.getString("SelectProtectedSysVolPane.table.vol.desc");

        for( int i=0; i<num; i++ ){
            BindOfPartandVol binder = (BindOfPartandVol)list.elementAt(i);
            data[i][0] = Boolean.valueOf( binder.isProtected );
            data[i][1] = binder.part;
            if( binder.isRealVol ){
                data[i][2] = (VolumeWrapper2)binder.vol;
            }else{
                data[i][2] = SanBootView.res.getString("common.nprotected");
            }

            data[i][3] = ( binder.ptype == BootHost.PROTECT_TYPE_CMDP )?pp:lp;

            if( binder.isRealVol ){
                data[i][4] = BasicVDisk.getBlkSizeStr( binder.vol.getSnap_block_size() );
            }else{
                data[i][4] = BasicVDisk.BLK_SIZE_4K;
            }

            if( binder.isRealVol ){
                PoolWrapper wrap = view.initor.mdb.getPoolWrapper( binder.vol.getSnap_pool_id() );
                if( wrap != null ){
                    data[i][5] = wrap;
                }else{
                    data[i][5] ="";
                }
            }else{
                if( poolList.size() >0 ){
                    data[i][5] = poolList.get(0);
                }else{
                    data[i][5]="";
                }
            }

            data[i][6] = binder.getMaxSnap();
            data[i][7] = Boolean.valueOf( binder.isFormatted );
            data[i][8] = binder.desc;

            label[i]= binder.part.disklabel;
        }

        MyDefaultTableModelForTabX2 model = new MyDefaultTableModelForTabX2( data,header,label );

        table = new JTableX2( model,view,wizardDiag );
        table.setRowHeight( 20 );
        table.setAutoResizeMode( JTable.AUTO_RESIZE_OFF );

        RowEditorModel rm = new RowEditorModel();
        ((JTableX2)table).setRowEditorModel(rm);

        CheckBoxEditor cb = new CheckBoxEditor();
        rm.addEditorForRow( 0, cb );
        
        MyComboBoxEditor mcb = new MyComboBoxEditor( ptypeList );
        rm.addEditorForRow( 3, mcb );

        MyComboBoxEditor mcb1 = new MyComboBoxEditor( blkList );
        rm.addEditorForRow( 4, mcb1 );

        mcb = new MyComboBoxEditor( poolList );
        rm.addEditorForRow( 5, mcb );

        cb = new CheckBoxEditor();
        rm.addEditorForRow( 7, cb );

        TableColumnModel tableColumnModel = table.getColumnModel();
        colNum = tableColumnModel.getColumnCount();
        tableColumnModel.getColumn(0).setWidth( 45 );
        tableColumnModel.getColumn(1).setWidth( 60 );
        tableColumnModel.getColumn(2).setWidth( 70 );
        tableColumnModel.getColumn(3).setWidth( 70 );
        tableColumnModel.getColumn(4).setWidth( 80 );
        tableColumnModel.getColumn(5).setWidth( 175 );
        tableColumnModel.getColumn(6).setWidth( 75 );
        tableColumnModel.getColumn(7).setWidth( 60 );
        tableColumnModel.getColumn(8).setWidth( 150 );
        for( int j=0;j<colNum;j++ )
            table.sizeColumnsToFit( j );

        table.getTableHeader().setBorder( BorderFactory.createRaisedBevelBorder() );
        table.getTableHeader().setReorderingAllowed(false);

        jScrollPane2.getViewport().add( table,null );
        jScrollPane2.getViewport().setBackground( Color.white );
    }

    public void setupTableForMTPP( Vector list ){
        int i;
        long cap;
        Object[][] data;
        
        ArrayList blkList  = BasicVDisk.getBlkSizeList();
        ArrayList poolList = view.initor.mdb.getPoolWrapList( true );
        
        int num = list.size();
        data = new Object[num][11]; 
        
        header = new Object[11];
        label = new Object[num];

        header[0] = SanBootView.res.getString("SelectProtectedSysVolPane.table.vol.protected");
        header[1] = SanBootView.res.getString("SelectProtectedSysVolPane.table.vol.fs");
        header[2] = SanBootView.res.getString("SelectProtectedSysVolPane.table.vol.property");
        header[3] = SanBootView.res.getString("SelectProtectedSysVolPane.table.vol.action");
        header[4] = SanBootView.res.getString("SelectProtectedSysVolPane.table.vol.name");
        header[5] = SanBootView.res.getString("SelectProtectedSysVolPane.table.vol.size");
        header[6] = SanBootView.res.getString("SelectProtectedSysVolPane.table.vol.blksize");
        header[7] = SanBootView.res.getString("SelectProtectedSysVolPane.table.vol.pool");
        header[8] = SanBootView.res.getString("SelectProtectedSysVolPane.table.vol.maxSnap");
        header[9] = SanBootView.res.getString("SelectProtectedSysVolPane.table.vol.formatted");
        header[10] = SanBootView.res.getString("SelectProtectedSysVolPane.table.vol.desc");
        
        for( i=0; i<num; i++ ){
            BindOfPartandVol binder = (BindOfPartandVol)list.elementAt(i);
            data[i][0] = Boolean.valueOf( binder.isProtected );
            data[i][1] = binder.part;
            data[i][2] = binder.part.vender;
            data[i][3] = ( binder.action == 0 )?Boolean.TRUE:Boolean.FALSE;
            if( binder.isRealVol ){
                data[i][4] = binder.vol;
            }else{
                if( this.hasEnoughSpace ){
                    data[i][4] = binder.volName;
                }else{
                    data[i][4] = null;
                }
            }
            
            // 当存在对应的volmap时，就显示volmap的大小；否则显示实际分区的大小
            if( binder.volSize.length() == 0 ){
                cap = binder.part.getSizeInGiga();
                data[i][5] = (cap == -1L)? "" : cap+"";
            }else{
                data[i][5] = binder.volSize;
            }
            
            if( binder.isRealVol ){
//System.out.println(" blk size: "+binder.vol.getSnap_block_size() );                
                data[i][6] = BasicVDisk.getBlkSizeStr( binder.vol.getSnap_block_size() );
            }else{
                data[i][6] = BasicVDisk.BLK_SIZE_4K;
            }
            
            if( binder.isRealVol ){           
                PoolWrapper wrap = view.initor.mdb.getPoolWrapper( binder.vol.getSnap_pool_id() );
                if( wrap != null ){
                    data[i][7] = wrap;
                }else{
                    data[i][7] ="";
                }
            }else{
                if( poolList.size() >0 ){
                    data[i][7] = poolList.get(0);
                }else{
                    data[i][7]="";
                }
            }
            
            data[i][8] = binder.getMaxSnap();
            data[i][9] = Boolean.valueOf( binder.isFormatted );
            data[i][10] = binder.desc;
                    
            label[i]= binder.part.disklabel;
        }
        
        MyDefaultTableModelForTabX model = new MyDefaultTableModelForTabX( data,header,label );  
        
        table = new JTableX( model,view,wizardDiag,this.hasEnoughSpace );
        table.setRowHeight( 20 );
        table.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
        
        RowEditorModel rm = new RowEditorModel();
        ((JTableX)table).setRowEditorModel(rm);

        PaneEditor pe = new PaneEditor( (JTableX)table, view, wizardDiag,this.hasEnoughSpace  );
        rm.addEditorForRow( 3, pe );
        
        CheckBoxEditor cb = new CheckBoxEditor();
        rm.addEditorForRow( 0, cb );
        
        MyComboBoxEditor mcb = new MyComboBoxEditor( blkList );
        rm.addEditorForRow( 6, mcb );
        
        mcb = new MyComboBoxEditor( poolList );
        rm.addEditorForRow( 7, mcb );
        
        cb = new CheckBoxEditor();
        rm.addEditorForRow( 9, cb );
        
        TableColumnModel tableColumnModel = table.getColumnModel();
        int colNum = tableColumnModel.getColumnCount();
        tableColumnModel.getColumn(0).setWidth( 45 );
        tableColumnModel.getColumn(1).setWidth( 60 );
        tableColumnModel.getColumn(2).setWidth( 60 );
        tableColumnModel.getColumn(3).setWidth( 120 );
        tableColumnModel.getColumn(4).setWidth( 50 );
        tableColumnModel.getColumn(5).setWidth( 80 );
        tableColumnModel.getColumn(6).setWidth( 70 );
        tableColumnModel.getColumn(7).setWidth( 175 );
        tableColumnModel.getColumn(8).setWidth( 65 );
        tableColumnModel.getColumn(9).setWidth( 50 );
        tableColumnModel.getColumn(10).setWidth( 150 );
        for( i=0;i<colNum;i++ )
            table.sizeColumnsToFit(i);

        table.getTableHeader().setBorder( BorderFactory.createRaisedBevelBorder() );
        table.getTableHeader().setReorderingAllowed(false);
        
        jScrollPane2.getViewport().add( table,null );
        jScrollPane2.getViewport().setBackground( Color.white );
    }
    
    public void setWizardDialogSample( WizardDialogSample wdiag ){
        wizardDiag = wdiag;
    }
    
    public boolean hasProtectOSDisk(){
        SystemPartitionForWin part;

        DefaultTableModel model =  (DefaultTableModel)table.getModel();
        int lineNum = model.getRowCount();
        for( int row=0; row<lineNum; row++ ){
            part = (SystemPartitionForWin)model.getValueAt( row,1);
            if( part.disklabel.equals("C:\\") || part.disklabel.equals("C") ){
                return ((Boolean)model.getValueAt(row, 0 )).booleanValue();
            }
        }
        
        return false;
    }
    
    public boolean isFormated( int row ){
        DefaultTableModel model = (DefaultTableModel)table.getModel();
        Boolean isFormat = (Boolean)model.getValueAt(row, 9);
        return isFormat.booleanValue();
    }
    
    public int getSelectOSDiskVolRowOnTable(){
        SystemPartitionForWin part;
        
        DefaultTableModel model = (DefaultTableModel)table.getModel();
        int lineNum = model.getRowCount();
        for( int row=0; row<lineNum; row++ ){
            part = (SystemPartitionForWin)model.getValueAt( row,1);
            if( part.disklabel.equals("C:\\") || part.disklabel.equals("C") ){
                return row;
            }
        }
        
        return -1;
    }

    public Volume getSelectOSDiskVol(){
        if( mode == ResourceCenter.CMD_TYPE_MTPP ){
            return this.getSelectOSDiskVolForMTPP();
        }else{
            return this.getSelectOSDiskVolForCMDP();
        }
    }

    // 只有操作系统盘为真正的iscsi卷时才会返回非null的值
    public Volume getSelectOSDiskVolForMTPP(){
        SystemPartitionForWin part;
        
        DefaultTableModel model = (DefaultTableModel)table.getModel();
        int lineNum = model.getRowCount();
        for( int row=0; row<lineNum; row++ ){
            part = (SystemPartitionForWin)model.getValueAt( row,1);
            if( part.disklabel.equals("C:\\") || part.disklabel.equals("C") ){
                Object val = model.getValueAt( row, 4 );
                if( val instanceof Volume ){
                    return (Volume)val;
                }
            }
        }
        
        return null;
    }

    // 只有操作系统盘为真正的iscsi卷时才会返回非null的值
    public Volume getSelectOSDiskVolForCMDP(){
        SystemPartitionForWin part;

        DefaultTableModel model = (DefaultTableModel)table.getModel();
        int lineNum = model.getRowCount();
        for( int row=0; row<lineNum; row++ ){
            part = (SystemPartitionForWin)model.getValueAt( row,1 );
            if( part.disklabel.equals("C:\\") || part.disklabel.equals("C") ){
                Object val = model.getValueAt( row, 2 );
                if( val instanceof Volume ){
                    return (Volume)val;
                }
            }
        }
        
        return null;
    }

    public String getSelectOSMaxSnap(){
        SystemPartitionForWin part;
        
        DefaultTableModel model = (DefaultTableModel)table.getModel();
        int lineNum = model.getRowCount();
        for( int row=0; row<lineNum; row++ ){
            part = (SystemPartitionForWin)model.getValueAt( row,1);
            if( part.disklabel.equals("C:\\") || part.disklabel.equals("C") ){
                String maxSnap = (String)model.getValueAt( row, 8 );
                return maxSnap;
            }
        }
        
        return "";
    }
    
    public boolean isOSDiskActive(){
        SystemPartitionForWin part;
        
        DefaultTableModel model = (DefaultTableModel)table.getModel();
        int lineNum = model.getRowCount();
        for( int row=0; row<lineNum; row++ ){
            part = (SystemPartitionForWin)model.getValueAt( row,1);
            if( part.disklabel.equals("C:\\") || part.disklabel.equals("C") ){
                return part.isActivePart();
            }
        }
        
        return false;
    }
    
    public boolean hasProtectedDisk(){
        int cnt = 0;
        
        DefaultTableModel model = (DefaultTableModel)table.getModel();
        int lineNum = model.getRowCount();
        for( int row=0; row<lineNum; row++ ){
            Boolean isSel = (Boolean)model.getValueAt(row, 0 );
            if( isSel.booleanValue() ){
                cnt++;
            }
        }
        
        return ( cnt > 0 );
    }

    public boolean checkVolInfoValidity(){
        if( mode == ResourceCenter.CMD_TYPE_MTPP ){
            return this.checkVolInfoValidityForMTPP( );
        }else{
            return this.checkVolInfoValidityForUnitedProtect();
        }
    }

    public boolean checkVolInfoValidityForUnitedProtect(){
        Long acculateSize;
        PoolWrapper poolWrap;
        String bkSizeStr;
        long blkUnit,blockSize,bkNum;
        long valLong;
        int intPType,maxsnap;
        String ptype;
        Object volObj;
        HashMap map = new HashMap();
        SystemPartitionForWin part;
        boolean notNeedCheckSize;

        DefaultTableModel model = (DefaultTableModel)table.getModel();
        int lineNum = model.getRowCount();
        for( int row=0; row<lineNum; row++ ){
            Boolean isSel = (Boolean)model.getValueAt( row, 0 );
            part = (SystemPartitionForWin)model.getValueAt(row, 1);
            volObj = model.getValueAt( row,2 );

            ptype = (String)model.getValueAt( row, 3 );
            if( ptype.equals( SanBootView.res.getString("SelectProtectedSysVolPane.combox.lp") ) ){
                intPType = BootHost.PROTECT_TYPE_MTPP;
            }else{
                intPType = BootHost.PROTECT_TYPE_CMDP;
            }

            // 已经创建出来的卷就不要再检查尺寸的合法性了
            notNeedCheckSize = ( volObj instanceof Volume );

            if( isSel.booleanValue() ){
                if( !notNeedCheckSize ){
                    // 检查大小是否合法,依据partition的大小来判断
                    Object size = part.getSizeInBytes();
                    if( size == null ){
                        return false;
                    }else{
                        try{
                            bkSizeStr = (String)model.getValueAt( row, 4 );
                            blkUnit = BasicVDisk.getBlkSizeFromStr( bkSizeStr );
                        }catch(Exception ex){
                            blkUnit = 17;
                        }

                        poolWrap = (PoolWrapper)model.getValueAt( row,5 );
                        double val;
                        String _val = (String)size;
                        try{
                            val = Double.parseDouble( _val );
                        }catch(Exception ex){
                            JOptionPane.showMessageDialog(this,
                                SanBootView.res.getString("SelectProtectedSysVolPane.error.invalidVal") + "["+row+",5]"
                            );
                            return false;
                        }

                        blockSize = (long)( 1<< blkUnit );
                        bkNum =(long)( ( val + blockSize-1 )/blockSize );

                        // change unit from GB to byte
                        valLong = blockSize*bkNum; //  真正的卷大小[bytes]
                        vgSize = poolWrap.pool.getRealFreeSize();

                        if( valLong <= 0 || valLong > vgSize ){
                            JOptionPane.showMessageDialog(this,
                                SanBootView.res.getString("SelectProtectedSysVolPane.error.invalidVal") + "(" + poolWrap.pool.getRealFreeSizeStr() + ") [" + row + ",5]"
                            );
                            return false;
                        }

                        if( !(volObj instanceof Volume) ){
                            acculateSize = (Long)map.get( poolWrap.pool );
                            if( acculateSize == null ){
                                map.put( poolWrap.pool, new Long( valLong ) );
                            }else{
                                valLong = acculateSize.longValue() + valLong;
                                map.put( poolWrap.pool, new Long( valLong ) );
                            }
                        }
                    }
                }

                Object snapNum = model.getValueAt( row,6 );
                if( snapNum == null ){
                    return false;
                }else{
                    maxsnap = ( intPType == BootHost.PROTECT_TYPE_CMDP ) ? ResourceCenter.MAX_SNAP_CMDP_NUM:ResourceCenter.MAX_SNAP_NUM;
                    int num;
                    String _num =(String)snapNum;
                    try{
                        num = Integer.parseInt( _num );
                    }catch(Exception ex){
                        JOptionPane.showMessageDialog(this,
                            SanBootView.res.getString("SelectProtectedSysVolPane.error.invalidSnapVal") +" " +maxsnap  + " ["+row+",6]"
                        );
                        return false;
                    }

                    if( num <= 0 || num > maxsnap ){
SanBootView.log.info(getClass().getName(), " num: "+ num +" res:maxsnap : "+ maxsnap  +" for [" + row +",6]");
                        JOptionPane.showMessageDialog(this,
                            SanBootView.res.getString("SelectProtectedSysVolPane.error.invalidSnapVal") +" " +maxsnap + " ["+row+",6]"
                        );
                        return false;
                    }
                }

                Object _volDesc = model.getValueAt( row, 8 );
                if( _volDesc == null ){
                    return false;
                }else{
                    String volDesc = (String)_volDesc;
                    if( volDesc.length() != 0 ){
                        if( Check.checkInput( volDesc ) ){
                            JOptionPane.showMessageDialog( this,
                                SanBootView.res.getString("SelectProtectedSysVolPane.error.invalidVolDesc") + " [" +row+",8]"
                            );
                            return false;
                        }

                        if( volDesc.equals("VG") || volDesc.equals("TGT") ){
                            JOptionPane.showMessageDialog( this,
                                SanBootView.res.getString("SelectProtectedSysVolPane.error.reservedKeyWord") + " [" +row+",8]"
                            );
                            return false;
                        }

                        if( volDesc.getBytes().length > 256 ){
                            JOptionPane.showMessageDialog( this,
                                SanBootView.res.getString("SelectProtectedSysVolPane.error.invalidVolDesc") + " [" +row+",8]"
                            );
                            return false;
                        }
                    }
                }
            }else{ // 用户不再保护该卷，检查其上有无mj,若有,则用户必须保护它
                if( hasMj( row,true, null  ) ){
                    JOptionPane.showMessageDialog(this,
                        SanBootView.res.getString("SelectProtectedSysVolPane.error.hasMj") + " :  " + part.toString()
                    );
                    return false;
                }
            }
        }

        // 检查各个pool上总创建容量是否超过其最大空闲值
        Set set  = map.keySet();
        Iterator iterator = set.iterator();
        while( iterator.hasNext() ){
            Pool pool = (Pool)iterator.next();
            Long accuSize = (Long)map.get( pool );
            if( accuSize.longValue() > pool.getRealFreeSize() ){
                JOptionPane.showMessageDialog(this,
                    SanBootView.res.getString("SelectProtectedSysVolPane.error.beyondVgSize") + " " + pool.getPool_name() + " [ " + BasicVDisk.getCapStr( accuSize.longValue() ) + " > " + pool.getRealFreeSizeStr() + " ]"
                );
                return false;
            }
        }

        return true;
    }

    public boolean checkVolInfoValidityForMTPP(){
        boolean isCrt;
        Long acculateSize;
        PoolWrapper poolWrap;
        String bkSizeStr;
        long blkUnit,blockSize,bkNum;
        long valLong;
        HashMap map = new HashMap();
        
        DefaultTableModel model = (DefaultTableModel)table.getModel();
        int lineNum = model.getRowCount();
        for( int row=0; row<lineNum; row++ ){
            Boolean isSel = (Boolean)model.getValueAt( row, 0 );
            if( isSel.booleanValue() ){
                Object vol = model.getValueAt( row, 4 );
                if( vol == null ){
                    JOptionPane.showMessageDialog(this,
                        SanBootView.res.getString("SelectProtectedSysVolPane.error.noneName") + "["+row+",4]"
                    );
                    return false;
                }else{
                    if( !(vol instanceof Volume ) ){
                        String name = vol.toString();
                        if( name.length() == 0 ){
                            JOptionPane.showMessageDialog(this,
                                SanBootView.res.getString("SelectProtectedSysVolPane.error.noneName") + "["+row+",4]"
                            );
                            return false;
                        }
                        
                        if( Check.checkInput( name ) ){
                            JOptionPane.showMessageDialog(this,
                                SanBootView.res.getString("CreateOrphanVol.error.badName")
                            );
                            return false;
                        }
                        
                        if( name.getBytes().length >=255 ){
                            JOptionPane.showMessageDialog(this,
                                SanBootView.res.getString("CreateOrphanVol.error.nametoolong")
                            );
                            return false;
                        }
                        
                         //检查名字是否重复
                        if( hasSameNameOnTable( name, row ) || view.hasSameVolName( name ) ){
                            JOptionPane.showMessageDialog(this,
                                SanBootView.res.getString("SelectProtectedSysVolPane.error.sameName") + "["+row+",4]"
                            );
                            return false;
                        }
                    }
                }
                
                isCrt = ((Boolean)model.getValueAt(row, 3)).booleanValue();
                if( isCrt ){ // 只有创建的卷才检查大小是否合法
                    Object size = model.getValueAt( row,5 );
                    if( size == null ){
                        return false;
                    }else{
                        try{
                            bkSizeStr = (String)model.getValueAt(row, 6);
                            blkUnit = BasicVDisk.getBlkSizeFromStr( bkSizeStr );                
                        }catch(Exception ex){
                            blkUnit = 17;
                        }
                        
                        poolWrap = (PoolWrapper)model.getValueAt( row,7 );
                        double val;
                        String _val = (String)size;
                        try{
                            val = Double.parseDouble( _val );
                        }catch(Exception ex){
                            JOptionPane.showMessageDialog(this,
                                SanBootView.res.getString("SelectProtectedSysVolPane.error.invalidVal") + "["+row+",5]"
                            );
                            return false;
                        }
                        
                        blockSize = (long)( 1<< blkUnit );
                        bkNum =(long)( ( val*1024*1024*1024 + blockSize-1 )/blockSize );
                        
                        // change unit from GB to byte
                        valLong = blockSize*bkNum; //  真正的卷大小
                        vgSize = poolWrap.pool.getRealFreeSize();
                        
                        if( valLong <= 0 || valLong > vgSize ){
                            JOptionPane.showMessageDialog(this,
                                SanBootView.res.getString("SelectProtectedSysVolPane.error.invalidVal") + "(" + poolWrap.pool.getRealFreeSizeStr() + ") [" + row + ",5]"
                            );
                            return false;
                        }
                        
                        acculateSize = (Long)map.get( poolWrap.pool );
                        if( acculateSize == null ){
                            map.put( poolWrap.pool, new Long( valLong ) );
                        }else{
                            valLong = acculateSize.longValue() + valLong;       
                            map.put( poolWrap.pool, new Long( valLong ) );
                        }
                    }
                }
                
                if( hasMj( row,isCrt, vol ) ){
                    JOptionPane.showMessageDialog(this,
                        SanBootView.res.getString("SelectProtectedSysVolPane.error.hasMj1") + " ["+row+",4]"
                    );
                    return false;
                }
                
                Object snapNum = model.getValueAt( row,8 );
                if( snapNum == null ){
                    return false;
                }else{
                    int num;
                    String _num =(String)snapNum;
                    try{
                        num = Integer.parseInt( _num );
                    }catch(Exception ex){
                        JOptionPane.showMessageDialog(this,
                            SanBootView.res.getString("SelectProtectedSysVolPane.error.invalidSnapVal") +" " +ResourceCenter.MAX_SNAP_NUM  + " ["+row+",8]"
                        );
                        return false;
                    }
SanBootView.log.info(getClass().getName()," num: "+ num +" res:maxsnap: "+ ResourceCenter.MAX_SNAP_NUM +" for [ " + row +",8 ]");
                    if( num <= 0 || num > ResourceCenter.MAX_SNAP_NUM ){
                        JOptionPane.showMessageDialog(this,
                            SanBootView.res.getString("SelectProtectedSysVolPane.error.invalidSnapVal") +" " +ResourceCenter.MAX_SNAP_NUM + " ["+row+",8]"
                        );
                        return false;
                    }
                }
                
                Object _volDesc = model.getValueAt( row, 10 );
                if( _volDesc == null ){
                    return false;
                }else{
                    String volDesc = (String)_volDesc;
                    if( volDesc.length() != 0 ){
                        if( Check.checkInput( volDesc ) ){
                            JOptionPane.showMessageDialog( this,
                                SanBootView.res.getString("SelectProtectedSysVolPane.error.invalidVolDesc") + " [" +row+",10]"
                            );
                            return false;
                        }
                        
                        if( volDesc.equals("VG") || volDesc.equals("TGT") ){
                            JOptionPane.showMessageDialog( this,
                                SanBootView.res.getString("SelectProtectedSysVolPane.error.reservedKeyWord") + " [" +row+",10]"
                            );
                            return false;
                        }
                        
                        if( volDesc.getBytes().length > 256 ){
                            JOptionPane.showMessageDialog( this,
                                SanBootView.res.getString("SelectProtectedSysVolPane.error.invalidVolDesc") + " [" +row+",10]"
                            );
                            return false;
                        }
                    }
                }
            }else{ // 用户不再保护该卷，检查其上有无mj,若有,则用户必须保护它
                if( hasMj( row,true, null  ) ){
                    SystemPartitionForWin part = (SystemPartitionForWin)model.getValueAt(row, 1);
                    JOptionPane.showMessageDialog(this,
                        SanBootView.res.getString("SelectProtectedSysVolPane.error.hasMj") + " :  " + part.toString()
                    );
                    return false;
                }
            }
        }
        
        // 检查各个pool上总创建容量是否超过其最大空闲值
        Set set  = map.keySet();
        Iterator iterator = set.iterator();
        while( iterator.hasNext() ){
            Pool pool = (Pool)iterator.next();
            Long accuSize = (Long)map.get( pool );
            if( accuSize.longValue() > pool.getRealFreeSize() ){
                JOptionPane.showMessageDialog(this,
                    SanBootView.res.getString("SelectProtectedSysVolPane.error.beyondVgSize") + " " + pool.getPool_name() + " [ " + BasicVDisk.getCapStr( accuSize.longValue() ) + " > " + pool.getRealFreeSizeStr() + " ]"
                );
                return false;
            }
        }
        
        return true;
    }
    
    public boolean isLessThanUsedSize(){
        boolean isCrt;
        String bkSizeStr;
        long blkUnit,blockSize,bkNum;
        long valLong;
        
        DefaultTableModel model = (DefaultTableModel)table.getModel();
        int lineNum = model.getRowCount();
        for( int row=0; row<lineNum; row++ ){
            Boolean isSel = (Boolean)model.getValueAt( row, 0 );
            if( isSel.booleanValue() ){                
                SystemPartitionForWin localdisk = (SystemPartitionForWin)model.getValueAt( row, 1 );                
                isCrt = ((Boolean)model.getValueAt(row, 3)).booleanValue();
                if( isCrt ){
                    Object size = model.getValueAt( row,5 );
                    try{
                        bkSizeStr = (String)model.getValueAt( row, 6 );
                        blkUnit = BasicVDisk.getBlkSizeFromStr( bkSizeStr );                
                    }catch( Exception ex ){
                        blkUnit = 17;
                    }
                    
                    double val;
                    String _val = (String)size;
//                    try{
                    val = Double.parseDouble( _val );
//                    }catch(Exception ex){}

                    blockSize = (long)( 1<< blkUnit );
                    bkNum =(long)( ( val*1024*1024*1024 + blockSize-1 )/blockSize );                        
                    // change unit from GB to byte
                    valLong = blockSize*bkNum; //  真正的卷大小
                    
System.out.println(" assign cap: "+ valLong +" used cap: "+ localdisk.getOccupiedInMega()+" MB" );
                    if( localdisk.getOccupiedInMega() != -1L ){
                        if( valLong <= localdisk.getOccupiedInMega()*1024*1024 ){
                            return false;
                        }
                    }
                }else{
                    Object size1 = model.getValueAt( row,5 );
                    double val1;                    
                    String _val1 = (String)size1;
//                    try{
                    val1 = Double.parseDouble( _val1 );
//                    }catch(Exception ex){}
                    
                    if( localdisk.getOccupiedInMega() != -1L ){
System.out.println(" assign cap: "+ val1*1024*1024*1024 +" used cap: "+ localdisk.getOccupiedInMega()+" MB" );                        
                        if( val1*1024*1024*1024 <= localdisk.getOccupiedInMega()*1024*1024 ){
                            return false;
                        }
                    }
                }
            }
        }
        
        return true;   
    }
    
    private boolean hasMj( int index,boolean isCrt,Object _volOnGUI ){
        BindOfPartandVol binder;
        
        // 检查curVolUsage list中有无卷上有mg/mj
        binder = (BindOfPartandVol)curVolUsage.elementAt( index );
        if( isCrt ){
            if( binder.isRealVol ){ // 该盘当前已经存在对应的保护卷,但是用户要重新为它创建一个卷;需要检查当前保护卷由于mg/mg
                return hasMjOnVol( binder.vol.getSnap_root_id() );
            }else{
                return false;
            }
        }else{
            Volume volOnGUI = (Volume)_volOnGUI;
            if( binder.isRealVol ){ // 该盘当前已经存在对应的保护卷,但是用户要重新为它创建一个卷;需要检查当前保护卷由于mg/mj
                if( binder.vol.getSnap_root_id() != volOnGUI.getSnap_root_id() ){
                    if ( hasMjOnVol( binder.vol.getSnap_root_id() ) ){
                        return true;
                    }else{
                        return hasMjOnVol( volOnGUI.getSnap_root_id() );
                    }
                }else{
                    return false;
                }
            }else{
                // 查看新选择的卷有无mj
                return hasMjOnVol( volOnGUI.getSnap_root_id() );
            }
        }
    }
    
    private boolean hasMjOnVol( int rootid ){
        int mg_id;
        
        MirrorGrp mg = view.initor.mdb.getMGFromVectorOnRootID( rootid );
        if( mg == null ){
SanBootView.log.error( getClass().getName(),"Not found mg related rootid: " + rootid );           
            return false;
        }else{
            mg_id = mg.getMg_id();
        }
        
        ArrayList mjList = view.initor.mdb.getMjListFromVecOnMgID( mg_id );
        return ( mjList.size() > 0 );
    }
    
    public boolean isCopyOS(){
        return jRadioButton1.isSelected();
    }
    public void setCopyOSFlag( boolean val ){
        jRadioButton1.setSelected( val );
    }
    
    public boolean isOnlyModRegister(){
        return jRadioButton2.isSelected();
    }
    public void setOnlyModRegisterFlag( boolean val ){
        jRadioButton2.setSelected( val );
    }
    
    public boolean isDonothing(){
        return jRadioButton3.isSelected();
    }
    public void setDonothingFlag( boolean val ){
        jRadioButton3.setSelected( val );
    }
    
    public void setActionMode( boolean isCopyOS,boolean isOnlyModRegister,boolean isDonothing ){
        if( isCopyOS){
            jRadioButton1.setSelected( true );
        }
        if( isOnlyModRegister ){
            jRadioButton2.setSelected( true );
        }
        if( isDonothing ){
            jRadioButton3.setSelected( true );
        }
    }

    public Vector getVolInfo(){
        if( mode == ResourceCenter.CMD_TYPE_MTPP ){
            return getVolInfoForMTPP();
        }else{
            return getVolInfoForCMDP();
        }
    }
    
    public Vector<BindOfPartandVol> getVolInfoForCMDP(){
        BindOfPartandVol binder;

        DefaultTableModel model = (DefaultTableModel)table.getModel();
        int lineNum = model.getRowCount();
        Vector ret = new Vector( lineNum );

        for( int row=0; row<lineNum; row++ ){
            binder = new BindOfPartandVol();
            binder.isProtected = ((Boolean)model.getValueAt( row, 0 )).booleanValue();
            binder.part = (SystemPartitionForWin)model.getValueAt(row, 1);
            
            Object volObj = model.getValueAt( row,2 );
            if( volObj instanceof Volume ){
                binder.action = 1;
                binder.isRealVol = true;
                binder.vol = (Volume)volObj;
            }else{
                binder.action = 0;
                binder.isRealVol = false;
                binder.volName = (String)volObj;
            }

            try{
                String ptype = (String)model.getValueAt( row, 3 );
                if( ptype.equals( SanBootView.res.getString("SelectProtectedSysVolPane.combox.lp") ) ){
                    binder.ptype = BootHost.PROTECT_TYPE_MTPP;
                }else{
                    binder.ptype = BootHost.PROTECT_TYPE_CMDP;
                }
            }catch(Exception ex){
                binder.ptype = BootHost.PROTECT_TYPE_CMDP;
            }

            try{
                String bkSizeStr = (String)model.getValueAt( row, 4 );
                binder.blkSize = BasicVDisk.getBlkSizeFromStr( bkSizeStr );
            }catch(Exception ex){
                binder.blkSize = 17;
            }

//            try{
                PoolWrapper wrap = (PoolWrapper)model.getValueAt( row, 5 );
                binder.poolid = wrap.pool.getPool_id();
//            }catch(Exception ex){}

            binder.maxSnap = (String)model.getValueAt( row, 6 );
            binder.isFormatted = ((Boolean)model.getValueAt( row, 7 )).booleanValue();
            binder.desc = (String)model.getValueAt( row, 8 );

            ret.addElement( binder );
        }

        return ret;
    }

    public Vector<BindOfPartandVol> getVolInfoForMTPP(){
        BindOfPartandVol binder;
        boolean isCrt;
        
        DefaultTableModel model = (DefaultTableModel)table.getModel();
        int lineNum = model.getRowCount();
        Vector<BindOfPartandVol> ret = new Vector<BindOfPartandVol>( lineNum );
        
        for( int row=0; row<lineNum; row++ ){
            binder = new BindOfPartandVol();
            binder.isProtected = ((Boolean)model.getValueAt( row, 0 )).booleanValue();
            binder.part = (SystemPartitionForWin)model.getValueAt(row, 1);
            isCrt = ((Boolean)model.getValueAt(row, 3)).booleanValue();
//System.out.println(" action: "+ isCrt );
            binder.action = isCrt? 0 : 1;
            
            Object volObj = model.getValueAt( row,4 );
            if( volObj instanceof Volume ){
                binder.isRealVol = true;
                binder.vol = (Volume)volObj;
            }else{
                binder.isRealVol = false;
                binder.volName = (String)volObj;
            }
            
            binder.volSize = (String)model.getValueAt( row,5 );
            
            try{
                String bkSizeStr = (String)model.getValueAt(row, 6);
                binder.blkSize = BasicVDisk.getBlkSizeFromStr( bkSizeStr );                
            }catch(Exception ex){
                binder.blkSize = 17;
            }
            
//            try{
                PoolWrapper wrap = (PoolWrapper)model.getValueAt(row, 7);
                binder.poolid = wrap.pool.getPool_id();
//            }catch(Exception ex){}
            
            binder.maxSnap = (String)model.getValueAt( row, 8 );
            binder.isFormatted = ((Boolean)model.getValueAt( row, 9 )).booleanValue();
            binder.desc = (String)model.getValueAt( row, 10);
            
            ret.addElement( binder );
        }
        
        return ret;
    }
    
    public boolean isThisFsProtected( String mp ){
        SystemPartitionForWin part;
        
        DefaultTableModel model = (DefaultTableModel)table.getModel();
        int lineNum = model.getRowCount();        
        for( int row=0; row<lineNum; row++ ){
            part = (SystemPartitionForWin)model.getValueAt( row,1 );
            if( part.label.toUpperCase().equals( mp.toUpperCase() ) ){
                return ((Boolean)model.getValueAt(row, 0)).booleanValue();
            }
        }
        
        return false;
    }
    
    private boolean hasSameNameOnTable( String name,int selRow ){
        boolean isSel;
        Volume vol;
        String volName;
        
        DefaultTableModel model = (DefaultTableModel)table.getModel();
        int lineNum = model.getRowCount();        
        for( int row=0; row<lineNum; row++ ){
            isSel = ((Boolean)model.getValueAt( row, 0 )).booleanValue();
            if( isSel && row !=selRow ){
                if( mode == ResourceCenter.CMD_TYPE_MTPP ){
                    Object volObj = model.getValueAt( row,4 );
                    if( volObj instanceof Volume ){
                        vol = (Volume)volObj;
                        if( vol.getSnap_name().equals( name ) ){
                            return true;
                        }
                    }else{
                        volName = (String)volObj;
                        if( volName.equals( name ) ){
                            return true;
                        }
                    }
                }else{
                    Object volObj = model.getValueAt( row,2 );
                    if( volObj instanceof Volume ){
                        volName = volObj.toString();
                    }else{
                        volName = (String)volObj;
                    }
                    if( volName.equals( name ) ){
                        return true;
                    }
                }
            }
        }
        return false;
    }

    public void fireEditingStopMsg(){
        if( mode == ResourceCenter.CMD_TYPE_MTPP ){
            this.fireEditingStopMsgForMTPP();
        }else{
            this.fireEditingStopMsgForCMDP();
        }
    }

    public void fireEditingStopMsgForMTPP(){
        TableCellEditor dce;
        
        AbstractTableModel model = (AbstractTableModel)table.getModel();
        int lineNum = model.getRowCount();
        for( int i=0; i<lineNum; i++  ){
            for( int j=0;j<11;j++ ){ //专门停止0,3，4,5,6,7,8,9,10列
                if( j == 1 || j == 2 ) continue;
                
                dce = table.getCellEditor( i,j );
                if( dce!=null ){
                    try{
                        while( !dce.stopCellEditing() ){}
                    }catch(Exception ex){
                    }
                }
            }
        }
    }

    public void fireEditingStopMsgForCMDP(){
        TableCellEditor dce;

        int colNum = 8;
        AbstractTableModel model = (AbstractTableModel)table.getModel();
        int lineNum = model.getRowCount();
        for( int i=0; i<lineNum; i++  ){
            for( int j=0;j<colNum;j++ ){ //专门停止0,2,3,4,5,6列
                if( j == 1 || j ==2 ) continue;

                dce = table.getCellEditor( i,j );
                if( dce!=null ){
                    try{
                        while(!dce.stopCellEditing()){}
                    }catch(Exception ex){}
                }
            }
        }
    }
}
